/*
 * This file is generated by jOOQ.
 */
package com.ftpix.sss.dsl.tables;


import com.ftpix.sss.dsl.Keys;
import com.ftpix.sss.dsl.Sss;
import com.ftpix.sss.dsl.tables.records.ResetPasswordRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ResetPassword extends TableImpl<ResetPasswordRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>sss.RESET_PASSWORD</code>
     */
    public static final ResetPassword RESET_PASSWORD = new ResetPassword();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ResetPasswordRecord> getRecordType() {
        return ResetPasswordRecord.class;
    }

    /**
     * The column <code>sss.RESET_PASSWORD.ID</code>.
     */
    public final TableField<ResetPasswordRecord, String> ID = createField(DSL.name("ID"), SQLDataType.VARCHAR(48).nullable(false), this, "");

    /**
     * The column <code>sss.RESET_PASSWORD.USER_ID</code>.
     */
    public final TableField<ResetPasswordRecord, String> USER_ID = createField(DSL.name("USER_ID"), SQLDataType.VARCHAR(48), this, "");

    /**
     * The column <code>sss.RESET_PASSWORD.expiryDate</code>.
     */
    public final TableField<ResetPasswordRecord, Long> EXPIRYDATE = createField(DSL.name("expiryDate"), SQLDataType.BIGINT, this, "");

    private ResetPassword(Name alias, Table<ResetPasswordRecord> aliased) {
        this(alias, aliased, null);
    }

    private ResetPassword(Name alias, Table<ResetPasswordRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>sss.RESET_PASSWORD</code> table reference
     */
    public ResetPassword(String alias) {
        this(DSL.name(alias), RESET_PASSWORD);
    }

    /**
     * Create an aliased <code>sss.RESET_PASSWORD</code> table reference
     */
    public ResetPassword(Name alias) {
        this(alias, RESET_PASSWORD);
    }

    /**
     * Create a <code>sss.RESET_PASSWORD</code> table reference
     */
    public ResetPassword() {
        this(DSL.name("RESET_PASSWORD"), null);
    }

    public <O extends Record> ResetPassword(Table<O> child, ForeignKey<O, ResetPasswordRecord> key) {
        super(child, key, RESET_PASSWORD);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Sss.SSS;
    }

    @Override
    public UniqueKey<ResetPasswordRecord> getPrimaryKey() {
        return Keys.KEY_RESET_PASSWORD_PRIMARY;
    }

    @Override
    public ResetPassword as(String alias) {
        return new ResetPassword(DSL.name(alias), this);
    }

    @Override
    public ResetPassword as(Name alias) {
        return new ResetPassword(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ResetPassword rename(String name) {
        return new ResetPassword(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ResetPassword rename(Name name) {
        return new ResetPassword(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, String, Long> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
