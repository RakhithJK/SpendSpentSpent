/*
 * This file is generated by jOOQ.
 */
package com.ftpix.sss.dsl.tables;


import com.ftpix.sss.dsl.Keys;
import com.ftpix.sss.dsl.Sss;
import com.ftpix.sss.dsl.tables.records.RecurringExpenseRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RecurringExpense extends TableImpl<RecurringExpenseRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>sss.RECURRING_EXPENSE</code>
     */
    public static final RecurringExpense RECURRING_EXPENSE = new RecurringExpense();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RecurringExpenseRecord> getRecordType() {
        return RecurringExpenseRecord.class;
    }

    /**
     * The column <code>sss.RECURRING_EXPENSE.ID</code>.
     */
    public final TableField<RecurringExpenseRecord, Long> ID = createField(DSL.name("ID"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>sss.RECURRING_EXPENSE.NAME</code>.
     */
    public final TableField<RecurringExpenseRecord, String> NAME = createField(DSL.name("NAME"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>sss.RECURRING_EXPENSE.CATEGORY_ID</code>.
     */
    public final TableField<RecurringExpenseRecord, Long> CATEGORY_ID = createField(DSL.name("CATEGORY_ID"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>sss.RECURRING_EXPENSE.TYPE</code>.
     */
    public final TableField<RecurringExpenseRecord, Integer> TYPE = createField(DSL.name("TYPE"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>sss.RECURRING_EXPENSE.TYPE_PARAM</code>.
     */
    public final TableField<RecurringExpenseRecord, Integer> TYPE_PARAM = createField(DSL.name("TYPE_PARAM"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>sss.RECURRING_EXPENSE.LAST_OCCURRENCE</code>.
     */
    public final TableField<RecurringExpenseRecord, String> LAST_OCCURRENCE = createField(DSL.name("LAST_OCCURRENCE"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>sss.RECURRING_EXPENSE.NEXT_OCCURRENCE</code>.
     */
    public final TableField<RecurringExpenseRecord, String> NEXT_OCCURRENCE = createField(DSL.name("NEXT_OCCURRENCE"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>sss.RECURRING_EXPENSE.AMOUNT</code>.
     */
    public final TableField<RecurringExpenseRecord, Double> AMOUNT = createField(DSL.name("AMOUNT"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>sss.RECURRING_EXPENSE.INCOME</code>.
     */
    public final TableField<RecurringExpenseRecord, Byte> INCOME = createField(DSL.name("INCOME"), SQLDataType.TINYINT, this, "");

    private RecurringExpense(Name alias, Table<RecurringExpenseRecord> aliased) {
        this(alias, aliased, null);
    }

    private RecurringExpense(Name alias, Table<RecurringExpenseRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>sss.RECURRING_EXPENSE</code> table reference
     */
    public RecurringExpense(String alias) {
        this(DSL.name(alias), RECURRING_EXPENSE);
    }

    /**
     * Create an aliased <code>sss.RECURRING_EXPENSE</code> table reference
     */
    public RecurringExpense(Name alias) {
        this(alias, RECURRING_EXPENSE);
    }

    /**
     * Create a <code>sss.RECURRING_EXPENSE</code> table reference
     */
    public RecurringExpense() {
        this(DSL.name("RECURRING_EXPENSE"), null);
    }

    public <O extends Record> RecurringExpense(Table<O> child, ForeignKey<O, RecurringExpenseRecord> key) {
        super(child, key, RECURRING_EXPENSE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Sss.SSS;
    }

    @Override
    public Identity<RecurringExpenseRecord, Long> getIdentity() {
        return (Identity<RecurringExpenseRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<RecurringExpenseRecord> getPrimaryKey() {
        return Keys.KEY_RECURRING_EXPENSE_PRIMARY;
    }

    @Override
    public RecurringExpense as(String alias) {
        return new RecurringExpense(DSL.name(alias), this);
    }

    @Override
    public RecurringExpense as(Name alias) {
        return new RecurringExpense(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public RecurringExpense rename(String name) {
        return new RecurringExpense(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RecurringExpense rename(Name name) {
        return new RecurringExpense(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Long, String, Long, Integer, Integer, String, String, Double, Byte> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
