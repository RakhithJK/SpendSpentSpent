/*
 * This file is generated by jOOQ.
 */
package com.ftpix.sss.dsl.tables.records;


import com.ftpix.sss.dsl.tables.Settings;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SettingsRecord extends UpdatableRecordImpl<SettingsRecord> implements Record3<String, String, Byte> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>sss.SETTINGS.NAME</code>.
     */
    public void setName(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>sss.SETTINGS.NAME</code>.
     */
    public String getName() {
        return (String) get(0);
    }

    /**
     * Setter for <code>sss.SETTINGS.VALUE</code>.
     */
    public void setValue(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>sss.SETTINGS.VALUE</code>.
     */
    public String getValue() {
        return (String) get(1);
    }

    /**
     * Setter for <code>sss.SETTINGS.SECRET</code>.
     */
    public void setSecret(Byte value) {
        set(2, value);
    }

    /**
     * Getter for <code>sss.SETTINGS.SECRET</code>.
     */
    public Byte getSecret() {
        return (Byte) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, String, Byte> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<String, String, Byte> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return Settings.SETTINGS.NAME;
    }

    @Override
    public Field<String> field2() {
        return Settings.SETTINGS.VALUE;
    }

    @Override
    public Field<Byte> field3() {
        return Settings.SETTINGS.SECRET;
    }

    @Override
    public String component1() {
        return getName();
    }

    @Override
    public String component2() {
        return getValue();
    }

    @Override
    public Byte component3() {
        return getSecret();
    }

    @Override
    public String value1() {
        return getName();
    }

    @Override
    public String value2() {
        return getValue();
    }

    @Override
    public Byte value3() {
        return getSecret();
    }

    @Override
    public SettingsRecord value1(String value) {
        setName(value);
        return this;
    }

    @Override
    public SettingsRecord value2(String value) {
        setValue(value);
        return this;
    }

    @Override
    public SettingsRecord value3(Byte value) {
        setSecret(value);
        return this;
    }

    @Override
    public SettingsRecord values(String value1, String value2, Byte value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached SettingsRecord
     */
    public SettingsRecord() {
        super(Settings.SETTINGS);
    }

    /**
     * Create a detached, initialised SettingsRecord
     */
    public SettingsRecord(String name, String value, Byte secret) {
        super(Settings.SETTINGS);

        setName(name);
        setValue(value);
        setSecret(secret);
    }
}
