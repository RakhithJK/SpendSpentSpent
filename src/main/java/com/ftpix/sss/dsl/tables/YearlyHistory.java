/*
 * This file is generated by jOOQ.
 */
package com.ftpix.sss.dsl.tables;


import com.ftpix.sss.dsl.Indexes;
import com.ftpix.sss.dsl.Keys;
import com.ftpix.sss.dsl.SSS;
import com.ftpix.sss.dsl.tables.records.YearlyHistoryRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class YearlyHistory extends TableImpl<YearlyHistoryRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>sss.YEARLY_HISTORY</code>
     */
    public static final YearlyHistory YEARLY_HISTORY = new YearlyHistory();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<YearlyHistoryRecord> getRecordType() {
        return YearlyHistoryRecord.class;
    }

    /**
     * The column <code>sss.YEARLY_HISTORY.ID</code>.
     */
    public final TableField<YearlyHistoryRecord, String> ID = createField(DSL.name("ID"), SQLDataType.VARCHAR(48).nullable(false), this, "");

    /**
     * The column <code>sss.YEARLY_HISTORY.CATEGORY_ID</code>.
     */
    public final TableField<YearlyHistoryRecord, Long> CATEGORY_ID = createField(DSL.name("CATEGORY_ID"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>sss.YEARLY_HISTORY.TOTAL</code>.
     */
    public final TableField<YearlyHistoryRecord, Double> TOTAL = createField(DSL.name("TOTAL"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>sss.YEARLY_HISTORY.DATE</code>.
     */
    public final TableField<YearlyHistoryRecord, Integer> DATE = createField(DSL.name("DATE"), SQLDataType.INTEGER, this, "");

    private YearlyHistory(Name alias, Table<YearlyHistoryRecord> aliased) {
        this(alias, aliased, null);
    }

    private YearlyHistory(Name alias, Table<YearlyHistoryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>sss.YEARLY_HISTORY</code> table reference
     */
    public YearlyHistory(String alias) {
        this(DSL.name(alias), YEARLY_HISTORY);
    }

    /**
     * Create an aliased <code>sss.YEARLY_HISTORY</code> table reference
     */
    public YearlyHistory(Name alias) {
        this(alias, YEARLY_HISTORY);
    }

    /**
     * Create a <code>sss.YEARLY_HISTORY</code> table reference
     */
    public YearlyHistory() {
        this(DSL.name("YEARLY_HISTORY"), null);
    }

    public <O extends Record> YearlyHistory(Table<O> child, ForeignKey<O, YearlyHistoryRecord> key) {
        super(child, key, YEARLY_HISTORY);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : SSS.SSS;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.YEARLY_HISTORY_YEARLY_HISTORY_DATE_IDX);
    }

    @Override
    public UniqueKey<YearlyHistoryRecord> getPrimaryKey() {
        return Keys.KEY_YEARLY_HISTORY_PRIMARY;
    }

    @Override
    public List<UniqueKey<YearlyHistoryRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_YEARLY_HISTORY_YEARLY_HISTORY_UNIQUE);
    }

    @Override
    public YearlyHistory as(String alias) {
        return new YearlyHistory(DSL.name(alias), this);
    }

    @Override
    public YearlyHistory as(Name alias) {
        return new YearlyHistory(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public YearlyHistory rename(String name) {
        return new YearlyHistory(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public YearlyHistory rename(Name name) {
        return new YearlyHistory(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<String, Long, Double, Integer> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
